package com.arm.fanucci.ui;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.AbstractButton;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToggleButton;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import com.arm.fanucci.Card;
import com.arm.fanucci.Deck;
import com.arm.fanucci.FanucciUtil;

public class CardPanel extends JPanel {

	private static final long serialVersionUID = 1L;
	
	private static final String[] SUITS = {
			"Bugs", "Lamps", "Mazes", "Fromps", "Hives", "Inkblots", "Ears",
			"Time", "Scythes", "Zurfs", "Books", "Plungers", "Tops", "Rain",
			"Faces"
	};
	
	private static final String[] BUTTON_LABELS = {
			"Naught", "1", "2", "3", "4", "5", "6", "7", "8", "9", "Infinity"
	};
	
	private JList suitList;
	private JPanel buttonPanel;

	/**
	 * Default constructor.
	 */
	public CardPanel() {
		init();
	}
	
	/**
	 * Helper method used to initialize the UI.
	 */
	private void init() {
		setLayout(new GridBagLayout());
		suitList = new JList(SUITS);
		suitList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		suitList.setSelectedIndex(0);
		add(new JScrollPane(suitList, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, 
					JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED), 
					new GridBagConstraints(0, 0, 1, 1, 0.3, 0.3, 
							GridBagConstraints.WEST, GridBagConstraints.BOTH,
							new Insets(1, 1, 1, 1), 0, 0)
		);
		
		buttonPanel = new JPanel();
		buttonPanel.setLayout(new GridLayout(4, 3, 5, 5));
		for (String label : BUTTON_LABELS) {
			JToggleButton button = new JToggleButton(label);
			button.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					handleButtonToggled(e);
				}
			});
			buttonPanel.add(button);
		}
		add(new JScrollPane(buttonPanel, 
				JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED),
				new GridBagConstraints(1, 0, 1, 1, 0.7, 0.7, 
						GridBagConstraints.CENTER, GridBagConstraints.BOTH, 
						new Insets(1, 1, 1, 1), 0, 0)
		);
		
		addListeners();
	}
	
	/**
	 * Method used to reset the selection.
	 */
	public void resetSelection() {
		suitList.clearSelection();
	}
	
	/**
	 * Method used to add listeners to the various UI components.
	 */
	private void addListeners() {
		suitList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				if (e.getValueIsAdjusting()) {
					return;
				}
				if (suitList.getSelectedIndex() == -1) {
					// Disable the buttons
					int count = buttonPanel.getComponentCount();
					for (int i = 0; i < count; i++) {
						AbstractButton button = 
								(AbstractButton) buttonPanel.getComponent(i);
						
						button.setSelected(false);
						button.setEnabled(false);
					}
				} else {
					// Enable the buttons.
					int count = buttonPanel.getComponentCount();
					for (int i = 0; i < count; i++) {
						AbstractButton button = 
								(AbstractButton) buttonPanel.getComponent(i);
												
						// Determine if the button should be enabled or not.
						short suitId = FanucciUtil.getSuitId(
								(String) suitList.getSelectedValue());
						
						short groupId = FanucciUtil.getGroupId(suitId);
						short value = FanucciUtil.getValue(button.getText());
						
						Card c = new Card(groupId, suitId, value);
						if (Deck.getInstance().hasCard(c)) {
							button.setSelected(true);
						} else {
							button.setSelected(false);
						}
						button.setEnabled(true);
					}
				}
			}			
		});		
	}

	/**
	 * Method used to handle button toggles.
	 * 
	 * @param e The event generated by the button toggle.
	 */
	private void handleButtonToggled(ActionEvent e) {
		AbstractButton button = (AbstractButton) e.getSource();
		short suitId = FanucciUtil.getSuitId(
				(String) suitList.getSelectedValue());
		
		short groupId = FanucciUtil.getGroupId(suitId);
		short value = FanucciUtil.getValue(button.getText());
		
		Card c = new Card(groupId, suitId, value);
		if (button.getModel().isSelected()) {
			Deck.getInstance().addCard(c);
		} else {
			Deck.getInstance().removeCard(c);
		}
	}
}
